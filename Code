# 1. Data Preparation and Cleaning
# Install necessary libraries 
install.packages(c("dplyr", "ggplot2", "caret", "pROC", "tidyr", "reshape2"))

# Load the libraries
library(dplyr)
library(ggplot2)
library(caret)
library(pROC)
library(tidyr)
library(reshape2)

# Load the dataset
data <- read.csv("2014_Financial_Data.csv")

# Rename the first column to "Stock Code" (since it is empty)
colnames(data)[1] <- "Stock Code"

# List of relevant columns for the analysis
relevant_columns <- c("Stock Code", "Revenue", "Revenue.Growth", "Cost.of.Revenue", "Gross.Profit", 
                      "R.D.Expenses", "SG.A.Expense", "Operating.Income", "Interest.Expense", 
                      "Debt.Growth", "EPS", "Free.Cash.Flow", "Net.Income", "Cash.and.cash.equivalents", 
                      "Total.assets", "Total.liabilities", "Total.shareholders.equity", 
                      "Market.Cap", "Enterprise.Value", "PE.ratio", "Price.to.Sales.Ratio", 
                      "Dividend.Yield", "Sector", "Class")

# Select only the relevant columns
data_relevant <- data %>%
  select(all_of(relevant_columns))

# Handle missing data (drop rows with NAs)
data_clean <- na.omit(data_relevant)

# Filter out extreme values for Revenue and Revenue Growth (outliers)
data_filtered <- data_clean %>%
  filter(Revenue <= 1e11, Revenue.Growth <= 10)  # Adjust thresholds for outliers in Revenue and Revenue Growth

# Check the structure of the cleaned dataset
str(data_filtered)



# 2. Grouping and Summarizing Data
# Create bins for Revenue Growth based on predefined ranges
data_filtered$Revenue_Growth_Category <- cut(data_filtered$Revenue.Growth,
                                              breaks = c(-Inf, -0.1, 0, 0.1, 0.2, Inf),
                                              labels = c("Negative Growth", "Small Growth", "Stable", "Moderate Growth", "High Growth"),
                                              right = FALSE)

# Group and summarize Revenue Growth by the categories
summary_by_growth_category <- data_filtered %>%
  group_by(Revenue_Growth_Category) %>%
  summarise(
    Min = min(Revenue.Growth, na.rm = TRUE),
    Q1 = quantile(Revenue.Growth, 0.25, na.rm = TRUE),
    Median = median(Revenue.Growth, na.rm = TRUE),
    Mean = mean(Revenue.Growth, na.rm = TRUE),
    Q3 = quantile(Revenue.Growth, 0.75, na.rm = TRUE),
    Max = max(Revenue.Growth, na.rm = TRUE)
  )

# Display the summary table by Revenue Growth category
print(summary_by_growth_category)


# 3. Visualizations
# a. Revenue Growth Distribution by Sector
# Bar plot for Revenue Growth categories by Sector
ggplot(data_filtered, aes(x = Revenue_Growth_Category, fill = Sector)) +
  geom_bar(position = "dodge") +
  labs(title = "Revenue Growth Distribution by Sector",
       x = "Revenue Growth Category", y = "Count") +
  theme_minimal()

# b. Violin Plot for Revenue Growth by Sector
# Violin plot for Revenue Growth by Sector
ggplot(data_filtered, aes(x = Sector, y = Revenue.Growth, fill = Sector)) +
  geom_violin() +
  labs(title = "Violin Plot of Revenue Growth by Sector",
       x = "Sector", y = "Revenue Growth") +
  theme_minimal() +
  theme(legend.position = "none")

# c. Box and Whisker Plot for Revenue Growth by Sector (Excluding Outliers)
# Box and Whisker plot for Revenue Growth by Sector (after excluding outliers)
Q1 <- quantile(data_filtered$Revenue.Growth, 0.25)
Q3 <- quantile(data_filtered$Revenue.Growth, 0.75)
IQR <- IQR(data_filtered$Revenue.Growth)

# Filter data to exclude outliers based on IQR
data_filtered_clean <- data_filtered %>%
  filter(Revenue.Growth > (Q1 - 1.5 * IQR) & Revenue.Growth < (Q3 + 1.5 * IQR))

ggplot(data_filtered_clean, aes(x = Sector, y = Revenue.Growth, fill = Sector)) +
  geom_boxplot() +
  labs(title = "Box and Whisker Plot of Revenue Growth by Sector (Excluding Outliers)",
       x = "Sector", y = "Revenue Growth") +
  theme_minimal() +
  theme(legend.position = "none")

# d. Bar Plot for Average Revenue by Sector
# Calculate the average revenue by sector
average_revenue_by_sector <- data_filtered %>%
  group_by(Sector) %>%
  summarise(Average_Revenue = mean(Revenue, na.rm = TRUE))

# Bar plot for average Revenue by Sector
ggplot(average_revenue_by_sector, aes(x = Sector, y = Average_Revenue, fill = Sector)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Revenue by Sector (No Outliers)",
       x = "Sector", y = "Average Revenue") +
  theme_minimal() +
  theme(legend.position = "none")


# 4. Modeling
# a. Linear Regression Model to Predict Revenue
# Fit a linear regression model to predict Revenue based on financial metrics
lm_model <- lm(Revenue ~ Cost.of.Revenue + Gross.Profit + Operating.Income, data = data_clean)

# View the summary of the linear model
summary(lm_model)

# Plot the residuals of the linear model (after excluding outliers)
plot(lm_model$residuals, main="Residuals of Linear Model", ylab="Residuals", col="red")

# b. Logistic Regression Model to Predict Class
# Fit a logistic regression model to predict Class
glm_model <- glm(Class ~ Revenue + Revenue.Growth + Gross.Profit + Operating.Income, 
                 family = binomial(link = "logit"), data = data_clean)

# View the summary of the logistic model
summary(glm_model)

# Predict the probabilities and classify based on threshold
predicted_probs <- predict(glm_model, type = "response")
predicted_class <- ifelse(predicted_probs > 0.5, 1, 0)

# Confusion matrix for evaluating the logistic regression model's performance
confusion_matrix <- table(predicted_class, data_clean$Class)
print(confusion_matrix)

# Evaluate accuracy of the logistic regression model
accuracy <- mean(predicted_class == data_clean$Class)
print(paste("Accuracy: ", accuracy))

# 5. Statistical Analysis: ANOVA
# Perform ANOVA to test if Revenue Growth differs significantly across sectors
anova_result <- aov(Revenue.Growth ~ Sector, data = data_clean)

# View the ANOVA summary
summary(anova_result)


