# Load the necessary libraries
library(tidyverse)

# Load the datasets for 2014-2018
df_2014 <- read.csv("2014_Financial_Data.csv")
df_2015 <- read.csv("2015_Financial_Data.csv")
df_2016 <- read.csv("2016_Financial_Data.csv")
df_2017 <- read.csv("2017_Financial_Data.csv")
df_2018 <- read.csv("2018_Financial_Data.csv")

# Handle missing data by replacing NA values with 0
df_2014_clean <- df_2014 %>% mutate(across(everything(), ~replace(., is.na(.), 0)))
df_2015_clean <- df_2015 %>% mutate(across(everything(), ~replace(., is.na(.), 0)))
df_2016_clean <- df_2016 %>% mutate(across(everything(), ~replace(., is.na(.), 0)))
df_2017_clean <- df_2017 %>% mutate(across(everything(), ~replace(., is.na(.), 0)))
df_2018_clean <- df_2018 %>% mutate(across(everything(), ~replace(., is.na(.), 0)))

# For example, we can set all data frames to have the same column names as the 2014 data frame.
colnames(df_2015_clean) <- colnames(df_2014_clean)
colnames(df_2016_clean) <- colnames(df_2014_clean)
colnames(df_2017_clean) <- colnames(df_2014_clean)
colnames(df_2018_clean) <- colnames(df_2014_clean)

# Rename the first column in each dataset to "StockCode"
colnames(df_2014_clean)[1] <- "StockCode"
colnames(df_2015_clean)[1] <- "StockCode"
colnames(df_2016_clean)[1] <- "StockCode"
colnames(df_2017_clean)[1] <- "StockCode"
colnames(df_2018_clean)[1] <- "StockCode"

# Add a "Year" column to each dataset
df_2014_clean$Year <- 2014
df_2015_clean$Year <- 2015
df_2016_clean$Year <- 2016
df_2017_clean$Year <- 2017
df_2018_clean$Year <- 2018

# Combine data from all years for all companies
df_all <- rbind(df_2014_clean, df_2015_clean, df_2016_clean, df_2017_clean, df_2018_clean)

# Calculate the average Quick Ratio and Debt to Equity Ratio per year
df_avg <- df_all %>% 
  group_by(Year) %>% 
  summarize(
    avg_quickRatio = mean(quickRatio, na.rm = TRUE),
    avg_debtEquityRatio = mean(debtEquityRatio, na.rm = TRUE)
  )

# Visualizing financial indicators: Average Quick Ratio over years
ggplot(df_avg, aes(x = factor(Year), y = avg_quickRatio)) + 
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(
    title = "Average Quick Ratio Analysis (All Companies, 2014-2018)", 
    x = "Year", 
    y = "Average Quick Ratio"
  )
print(df_avg$avg_quickRatio)

# Visualizing financial indicators: Average Debt to Equity Ratio over years
ggplot(df_avg, aes(x = factor(Year), y = avg_debtEquityRatio)) + 
  geom_bar(stat = "identity", fill = "red") +
  labs(
    title = "Average Debt to Equity Ratio (All Companies, 2014-2018)", 
    x = "Year", 
    y = "Average Debt to Equity Ratio"
  )
print(df_avg$avg_debtEquityRatio)

# Combine all companies' data (make sure they have the same structure and columns)
df_combined <- rbind(df_2014_clean, df_2015_clean, df_2016_clean, df_2017_clean, df_2018_clean)

# Show number of rows of the combined dataset
nrow(df_combined)

# Filter data for all companies
df_combined_clean <- df_combined %>%
  filter(!is.na(Net.Income))  # Remove rows with missing 'Net Income'

# Perform Linear Regression on the expanded dataset
lm_combined_model <- lm(Net.Income ~ Revenue + Total.assets + EBITDA + Total.liabilities, data = df_combined_clean)
summary(lm_combined_model)

# Visualization: Correlation Matrix
library(corrplot)
correlation_matrix <- cor(df_combined_clean %>% select(Revenue, Total.assets, EBITDA, Total.liabilities, Net.Income))
corrplot(correlation_matrix, method = "circle", type = "upper", tl.col = "black", tl.srt = 45)

print(correlation_matrix)

# Handling Outliers: Identifying extreme outliers and removing them
outliers <- df_combined_clean %>%
  filter(Net.Income > quantile(Net.Income, 0.99) | Net.Income < quantile(Net.Income, 0.01)) 
print(outliers)  # View extreme values for "Net Income"

# Remove outliers from the dataset
df_no_outliers <- df_combined_clean %>%
  filter(!(Net.Income > quantile(Net.Income, 0.99) | Net.Income < quantile(Net.Income, 0.01)))

# Visualize after cleaning (3rd visualization: Net Income distribution)
ggplot(df_no_outliers, aes(x = Net.Income)) + 
  geom_histogram(bins = 30, fill = "lightblue", color = "black") +
  labs(title = "Net Income Distribution After Removing Outliers", x = "Net Income", y = "Frequency")

# Summarize the net income without outliers
summary(df_no_outliers$Net.Income)

# Final model: Training and Testing a Linear Regression Model for Predicting 'Net Income'
# Train-test split
set.seed(42)
train_index <- sample(1:nrow(df_no_outliers), 0.7 * nrow(df_no_outliers))  # 70% for training
train_data <- df_no_outliers[train_index, ]
test_data <- df_no_outliers[-train_index, ]

# Train the model
lm_model_final <- lm(Net.Income ~ Revenue + Total.assets + EBITDA + Total.liabilities, data = train_data)
summary(lm_model_final)

# Prediction
predictions <- predict(lm_model_final, newdata = test_data)

# Evaluate the model
mse <- mean((predictions - test_data$Net.Income)^2)  # Mean Squared Error
rmse <- sqrt(mse)  # Root Mean Squared Error
print(paste("RMSE: ", rmse))

summary(test_data$Net.Income)

